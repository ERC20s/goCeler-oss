// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package rpc

import (
	fmt "fmt"
	entity "github.com/celer-network/goCeler-oss/entity"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 8
type ErrCode int32

const (
	// reserve 0 so not setting this is not a valid error code
	ErrCode_OK ErrCode = 0
	// not yet authreq/authack
	ErrCode_UNAUTHORIZED ErrCode = 1
	// sig in authreq can't recover claimed my_addr
	ErrCode_INVALID_SIG ErrCode = 2
	// timestamp in req out of allowed range
	ErrCode_INCORRECT_CLOCK ErrCode = 3
	// I'm not your expected peer
	ErrCode_WRONG_PEER ErrCode = 4
	// invalid simplex state sequence number
	ErrCode_INVALID_SEQ_NUM ErrCode = 5
	// forwared the pay before and receiving again, probably a loop.
	ErrCode_PAY_ROUTE_LOOP ErrCode = 6
	// can't find a route to dst.
	ErrCode_NO_ROUTE_TO_DST ErrCode = 7
)

var ErrCode_name = map[int32]string{
	0: "OK",
	1: "UNAUTHORIZED",
	2: "INVALID_SIG",
	3: "INCORRECT_CLOCK",
	4: "WRONG_PEER",
	5: "INVALID_SEQ_NUM",
	6: "PAY_ROUTE_LOOP",
	7: "NO_ROUTE_TO_DST",
}

var ErrCode_value = map[string]int32{
	"OK":              0,
	"UNAUTHORIZED":    1,
	"INVALID_SIG":     2,
	"INCORRECT_CLOCK": 3,
	"WRONG_PEER":      4,
	"INVALID_SEQ_NUM": 5,
	"PAY_ROUTE_LOOP":  6,
	"NO_ROUTE_TO_DST": 7,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

// Next Tag: 6
type PaymentSettleReason int32

const (
	PaymentSettleReason_PAY_VOUCHED          PaymentSettleReason = 0
	PaymentSettleReason_PAY_EXPIRED          PaymentSettleReason = 1
	PaymentSettleReason_PAY_REJECTED         PaymentSettleReason = 2
	PaymentSettleReason_PAY_RESOLVED_ONCHAIN PaymentSettleReason = 3
	PaymentSettleReason_PAY_PAID_MAX         PaymentSettleReason = 4
	PaymentSettleReason_PAY_DEST_UNREACHABLE PaymentSettleReason = 5
)

var PaymentSettleReason_name = map[int32]string{
	0: "PAY_VOUCHED",
	1: "PAY_EXPIRED",
	2: "PAY_REJECTED",
	3: "PAY_RESOLVED_ONCHAIN",
	4: "PAY_PAID_MAX",
	5: "PAY_DEST_UNREACHABLE",
}

var PaymentSettleReason_value = map[string]int32{
	"PAY_VOUCHED":          0,
	"PAY_EXPIRED":          1,
	"PAY_REJECTED":         2,
	"PAY_RESOLVED_ONCHAIN": 3,
	"PAY_PAID_MAX":         4,
	"PAY_DEST_UNREACHABLE": 5,
}

func (x PaymentSettleReason) String() string {
	return proto.EnumName(PaymentSettleReason_name, int32(x))
}

func (PaymentSettleReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

// Next Tag: 3
type OpenChannelBy int32

const (
	OpenChannelBy_UNDEFINED_OPEN_BY     OpenChannelBy = 0
	OpenChannelBy_OPEN_CHANNEL_PROPOSER OpenChannelBy = 1
	OpenChannelBy_OPEN_CHANNEL_APPROVER OpenChannelBy = 2
)

var OpenChannelBy_name = map[int32]string{
	0: "UNDEFINED_OPEN_BY",
	1: "OPEN_CHANNEL_PROPOSER",
	2: "OPEN_CHANNEL_APPROVER",
}

var OpenChannelBy_value = map[string]int32{
	"UNDEFINED_OPEN_BY":     0,
	"OPEN_CHANNEL_PROPOSER": 1,
	"OPEN_CHANNEL_APPROVER": 2,
}

func (x OpenChannelBy) String() string {
	return proto.EnumName(OpenChannelBy_name, int32(x))
}

func (OpenChannelBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

// Next Tag: 4
type OpenChannelStatus int32

const (
	OpenChannelStatus_UNDEFINED_OPEN_CHANNEL_STATUS OpenChannelStatus = 0
	// OpenChannel is approved by approver.
	// But no on-chain transaction has been made.
	OpenChannelStatus_OPEN_CHANNEL_APPROVED OpenChannelStatus = 1
	// OpenChannel transaction is submitted on-chain by approver.
	OpenChannelStatus_OPEN_CHANNEL_TX_SUBMITTED OpenChannelStatus = 2
	OpenChannelStatus_OPEN_CHANNEL_TCB_OPENED   OpenChannelStatus = 3
)

var OpenChannelStatus_name = map[int32]string{
	0: "UNDEFINED_OPEN_CHANNEL_STATUS",
	1: "OPEN_CHANNEL_APPROVED",
	2: "OPEN_CHANNEL_TX_SUBMITTED",
	3: "OPEN_CHANNEL_TCB_OPENED",
}

var OpenChannelStatus_value = map[string]int32{
	"UNDEFINED_OPEN_CHANNEL_STATUS": 0,
	"OPEN_CHANNEL_APPROVED":         1,
	"OPEN_CHANNEL_TX_SUBMITTED":     2,
	"OPEN_CHANNEL_TCB_OPENED":       3,
}

func (x OpenChannelStatus) String() string {
	return proto.EnumName(OpenChannelStatus_name, int32(x))
}

func (OpenChannelStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}

// MID is the message identifier, used as map key for unary over stream
// NOTE: all field types must be golang comparable so map[MID] can work
// Auth requester should set its mid to start_mid in AuthAck
type MID struct {
	// tag is string to identify requester to avoid seq conflict
	// for a typical req/resp flow, both req and resp messages have the same tag
	// that identifies requester, and same seq so requester side can correlate
	// resp with req
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// sender must increment seq for new messages
	Seq                  uint64   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MID) Reset()         { *m = MID{} }
func (m *MID) String() string { return proto.CompactTextString(m) }
func (*MID) ProtoMessage()    {}
func (*MID) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *MID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MID.Unmarshal(m, b)
}
func (m *MID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MID.Marshal(b, m, deterministic)
}
func (m *MID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MID.Merge(m, src)
}
func (m *MID) XXX_Size() int {
	return xxx_messageInfo_MID.Size(m)
}
func (m *MID) XXX_DiscardUnknown() {
	xxx_messageInfo_MID.DiscardUnknown(m)
}

var xxx_messageInfo_MID proto.InternalMessageInfo

func (m *MID) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *MID) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

// Envelope msg for unified bidi-streaming
type CelerMsg struct {
	Mid *MID `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// if ret_mid is set in received msg, use it as mid in next msg to send
	// this is to support multi-msg exchanges and let both ends be able to correlate
	// their own MID req/resp
	RetMid *MID `protobuf:"bytes,2,opt,name=ret_mid,json=retMid,proto3" json:"ret_mid,omitempty"`
	// bitmask flags for nature of this msg, eg. End2End, First msg in subflow, Last of subflow etc
	Flag uint64 `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	// to_addr is only used for end-to-end msg to save relay node looking into payload
	// for hop-by-hop, expected peer addr is already checked in authreq/ack so no need in every msg
	ToAddr []byte `protobuf:"bytes,4,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*CelerMsg_Error
	//	*CelerMsg_AuthReq
	//	*CelerMsg_AuthAck
	//	*CelerMsg_CondPayRequest
	//	*CelerMsg_CondPayResponse
	//	*CelerMsg_PaymentSettleProof
	//	*CelerMsg_PaymentSettleRequest
	//	*CelerMsg_PaymentSettleResponse
	//	*CelerMsg_WithdrawRequest
	//	*CelerMsg_WithdrawResponse
	//	*CelerMsg_CondPayReceipt
	//	*CelerMsg_RevealSecret
	//	*CelerMsg_RevealSecretAck
	//	*CelerMsg_PayResultVouchRequest
	//	*CelerMsg_PayResultVouchResponse
	Message              isCelerMsg_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CelerMsg) Reset()         { *m = CelerMsg{} }
func (m *CelerMsg) String() string { return proto.CompactTextString(m) }
func (*CelerMsg) ProtoMessage()    {}
func (*CelerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *CelerMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CelerMsg.Unmarshal(m, b)
}
func (m *CelerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CelerMsg.Marshal(b, m, deterministic)
}
func (m *CelerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CelerMsg.Merge(m, src)
}
func (m *CelerMsg) XXX_Size() int {
	return xxx_messageInfo_CelerMsg.Size(m)
}
func (m *CelerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CelerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CelerMsg proto.InternalMessageInfo

func (m *CelerMsg) GetMid() *MID {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *CelerMsg) GetRetMid() *MID {
	if m != nil {
		return m.RetMid
	}
	return nil
}

func (m *CelerMsg) GetFlag() uint64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *CelerMsg) GetToAddr() []byte {
	if m != nil {
		return m.ToAddr
	}
	return nil
}

type isCelerMsg_Message interface {
	isCelerMsg_Message()
}

type CelerMsg_Error struct {
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

type CelerMsg_AuthReq struct {
	AuthReq *AuthReq `protobuf:"bytes,7,opt,name=auth_req,json=authReq,proto3,oneof"`
}

type CelerMsg_AuthAck struct {
	AuthAck *AuthAck `protobuf:"bytes,8,opt,name=auth_ack,json=authAck,proto3,oneof"`
}

type CelerMsg_CondPayRequest struct {
	CondPayRequest *CondPayRequest `protobuf:"bytes,9,opt,name=cond_pay_request,json=condPayRequest,proto3,oneof"`
}

type CelerMsg_CondPayResponse struct {
	CondPayResponse *CondPayResponse `protobuf:"bytes,10,opt,name=cond_pay_response,json=condPayResponse,proto3,oneof"`
}

type CelerMsg_PaymentSettleProof struct {
	PaymentSettleProof *PaymentSettleProof `protobuf:"bytes,11,opt,name=payment_settle_proof,json=paymentSettleProof,proto3,oneof"`
}

type CelerMsg_PaymentSettleRequest struct {
	PaymentSettleRequest *PaymentSettleRequest `protobuf:"bytes,12,opt,name=payment_settle_request,json=paymentSettleRequest,proto3,oneof"`
}

type CelerMsg_PaymentSettleResponse struct {
	PaymentSettleResponse *PaymentSettleResponse `protobuf:"bytes,13,opt,name=payment_settle_response,json=paymentSettleResponse,proto3,oneof"`
}

type CelerMsg_WithdrawRequest struct {
	WithdrawRequest *CooperativeWithdrawRequest `protobuf:"bytes,14,opt,name=withdraw_request,json=withdrawRequest,proto3,oneof"`
}

type CelerMsg_WithdrawResponse struct {
	WithdrawResponse *CooperativeWithdrawResponse `protobuf:"bytes,15,opt,name=withdraw_response,json=withdrawResponse,proto3,oneof"`
}

type CelerMsg_CondPayReceipt struct {
	CondPayReceipt *CondPayReceipt `protobuf:"bytes,31,opt,name=cond_pay_receipt,json=condPayReceipt,proto3,oneof"`
}

type CelerMsg_RevealSecret struct {
	RevealSecret *RevealSecret `protobuf:"bytes,32,opt,name=reveal_secret,json=revealSecret,proto3,oneof"`
}

type CelerMsg_RevealSecretAck struct {
	RevealSecretAck *RevealSecretAck `protobuf:"bytes,33,opt,name=reveal_secret_ack,json=revealSecretAck,proto3,oneof"`
}

type CelerMsg_PayResultVouchRequest struct {
	PayResultVouchRequest *entity.VouchedCondPayResult `protobuf:"bytes,34,opt,name=pay_result_vouch_request,json=payResultVouchRequest,proto3,oneof"`
}

type CelerMsg_PayResultVouchResponse struct {
	PayResultVouchResponse *entity.VouchedCondPayResult `protobuf:"bytes,35,opt,name=pay_result_vouch_response,json=payResultVouchResponse,proto3,oneof"`
}

func (*CelerMsg_Error) isCelerMsg_Message() {}

func (*CelerMsg_AuthReq) isCelerMsg_Message() {}

func (*CelerMsg_AuthAck) isCelerMsg_Message() {}

func (*CelerMsg_CondPayRequest) isCelerMsg_Message() {}

func (*CelerMsg_CondPayResponse) isCelerMsg_Message() {}

func (*CelerMsg_PaymentSettleProof) isCelerMsg_Message() {}

func (*CelerMsg_PaymentSettleRequest) isCelerMsg_Message() {}

func (*CelerMsg_PaymentSettleResponse) isCelerMsg_Message() {}

func (*CelerMsg_WithdrawRequest) isCelerMsg_Message() {}

func (*CelerMsg_WithdrawResponse) isCelerMsg_Message() {}

func (*CelerMsg_CondPayReceipt) isCelerMsg_Message() {}

func (*CelerMsg_RevealSecret) isCelerMsg_Message() {}

func (*CelerMsg_RevealSecretAck) isCelerMsg_Message() {}

func (*CelerMsg_PayResultVouchRequest) isCelerMsg_Message() {}

func (*CelerMsg_PayResultVouchResponse) isCelerMsg_Message() {}

func (m *CelerMsg) GetMessage() isCelerMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *CelerMsg) GetError() *Error {
	if x, ok := m.GetMessage().(*CelerMsg_Error); ok {
		return x.Error
	}
	return nil
}

func (m *CelerMsg) GetAuthReq() *AuthReq {
	if x, ok := m.GetMessage().(*CelerMsg_AuthReq); ok {
		return x.AuthReq
	}
	return nil
}

func (m *CelerMsg) GetAuthAck() *AuthAck {
	if x, ok := m.GetMessage().(*CelerMsg_AuthAck); ok {
		return x.AuthAck
	}
	return nil
}

func (m *CelerMsg) GetCondPayRequest() *CondPayRequest {
	if x, ok := m.GetMessage().(*CelerMsg_CondPayRequest); ok {
		return x.CondPayRequest
	}
	return nil
}

func (m *CelerMsg) GetCondPayResponse() *CondPayResponse {
	if x, ok := m.GetMessage().(*CelerMsg_CondPayResponse); ok {
		return x.CondPayResponse
	}
	return nil
}

func (m *CelerMsg) GetPaymentSettleProof() *PaymentSettleProof {
	if x, ok := m.GetMessage().(*CelerMsg_PaymentSettleProof); ok {
		return x.PaymentSettleProof
	}
	return nil
}

func (m *CelerMsg) GetPaymentSettleRequest() *PaymentSettleRequest {
	if x, ok := m.GetMessage().(*CelerMsg_PaymentSettleRequest); ok {
		return x.PaymentSettleRequest
	}
	return nil
}

func (m *CelerMsg) GetPaymentSettleResponse() *PaymentSettleResponse {
	if x, ok := m.GetMessage().(*CelerMsg_PaymentSettleResponse); ok {
		return x.PaymentSettleResponse
	}
	return nil
}

func (m *CelerMsg) GetWithdrawRequest() *CooperativeWithdrawRequest {
	if x, ok := m.GetMessage().(*CelerMsg_WithdrawRequest); ok {
		return x.WithdrawRequest
	}
	return nil
}

func (m *CelerMsg) GetWithdrawResponse() *CooperativeWithdrawResponse {
	if x, ok := m.GetMessage().(*CelerMsg_WithdrawResponse); ok {
		return x.WithdrawResponse
	}
	return nil
}

func (m *CelerMsg) GetCondPayReceipt() *CondPayReceipt {
	if x, ok := m.GetMessage().(*CelerMsg_CondPayReceipt); ok {
		return x.CondPayReceipt
	}
	return nil
}

func (m *CelerMsg) GetRevealSecret() *RevealSecret {
	if x, ok := m.GetMessage().(*CelerMsg_RevealSecret); ok {
		return x.RevealSecret
	}
	return nil
}

func (m *CelerMsg) GetRevealSecretAck() *RevealSecretAck {
	if x, ok := m.GetMessage().(*CelerMsg_RevealSecretAck); ok {
		return x.RevealSecretAck
	}
	return nil
}

func (m *CelerMsg) GetPayResultVouchRequest() *entity.VouchedCondPayResult {
	if x, ok := m.GetMessage().(*CelerMsg_PayResultVouchRequest); ok {
		return x.PayResultVouchRequest
	}
	return nil
}

func (m *CelerMsg) GetPayResultVouchResponse() *entity.VouchedCondPayResult {
	if x, ok := m.GetMessage().(*CelerMsg_PayResultVouchResponse); ok {
		return x.PayResultVouchResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CelerMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CelerMsg_Error)(nil),
		(*CelerMsg_AuthReq)(nil),
		(*CelerMsg_AuthAck)(nil),
		(*CelerMsg_CondPayRequest)(nil),
		(*CelerMsg_CondPayResponse)(nil),
		(*CelerMsg_PaymentSettleProof)(nil),
		(*CelerMsg_PaymentSettleRequest)(nil),
		(*CelerMsg_PaymentSettleResponse)(nil),
		(*CelerMsg_WithdrawRequest)(nil),
		(*CelerMsg_WithdrawResponse)(nil),
		(*CelerMsg_CondPayReceipt)(nil),
		(*CelerMsg_RevealSecret)(nil),
		(*CelerMsg_RevealSecretAck)(nil),
		(*CelerMsg_PayResultVouchRequest)(nil),
		(*CelerMsg_PayResultVouchResponse)(nil),
	}
}

type Error struct {
	Code   ErrCode `protobuf:"varint,1,opt,name=code,proto3,enum=rpc.ErrCode" json:"code,omitempty"`
	Reason string  `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// sequence number of the errored message, needed for non-unary rpc
	Seq                  uint64   `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_OK
}

func (m *Error) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Error) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

// prove to peer I own this addr
type AuthReq struct {
	MyAddr []byte `protobuf:"bytes,1,opt,name=my_addr,json=myAddr,proto3" json:"my_addr,omitempty"`
	// protect against replay attack
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// sig of timestamp field
	MySig      []byte `protobuf:"bytes,3,opt,name=my_sig,json=mySig,proto3" json:"my_sig,omitempty"`
	ExpectPeer []byte `protobuf:"bytes,4,opt,name=expect_peer,json=expectPeer,proto3" json:"expect_peer,omitempty"`
	// whether to require peer proving it owns expect_peer
	MutualAuth           bool     `protobuf:"varint,5,opt,name=mutual_auth,json=mutualAuth,proto3" json:"mutual_auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthReq) Reset()         { *m = AuthReq{} }
func (m *AuthReq) String() string { return proto.CompactTextString(m) }
func (*AuthReq) ProtoMessage()    {}
func (*AuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}

func (m *AuthReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthReq.Unmarshal(m, b)
}
func (m *AuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthReq.Marshal(b, m, deterministic)
}
func (m *AuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthReq.Merge(m, src)
}
func (m *AuthReq) XXX_Size() int {
	return xxx_messageInfo_AuthReq.Size(m)
}
func (m *AuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuthReq proto.InternalMessageInfo

func (m *AuthReq) GetMyAddr() []byte {
	if m != nil {
		return m.MyAddr
	}
	return nil
}

func (m *AuthReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AuthReq) GetMySig() []byte {
	if m != nil {
		return m.MySig
	}
	return nil
}

func (m *AuthReq) GetExpectPeer() []byte {
	if m != nil {
		return m.ExpectPeer
	}
	return nil
}

func (m *AuthReq) GetMutualAuth() bool {
	if m != nil {
		return m.MutualAuth
	}
	return false
}

type AuthAck struct {
	// expect requester to set mid to start_mid in next message
	// including the assigned tag
	StartMid *MID `protobuf:"bytes,1,opt,name=start_mid,json=startMid,proto3" json:"start_mid,omitempty"`
	// if req set mutual_auth, return acker's sig of authreq.timestamp
	// we assume requester has context to verify against expect_peer
	MySig                []byte   `protobuf:"bytes,2,opt,name=my_sig,json=mySig,proto3" json:"my_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthAck) Reset()         { *m = AuthAck{} }
func (m *AuthAck) String() string { return proto.CompactTextString(m) }
func (*AuthAck) ProtoMessage()    {}
func (*AuthAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}

func (m *AuthAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthAck.Unmarshal(m, b)
}
func (m *AuthAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthAck.Marshal(b, m, deterministic)
}
func (m *AuthAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthAck.Merge(m, src)
}
func (m *AuthAck) XXX_Size() int {
	return xxx_messageInfo_AuthAck.Size(m)
}
func (m *AuthAck) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthAck.DiscardUnknown(m)
}

var xxx_messageInfo_AuthAck proto.InternalMessageInfo

func (m *AuthAck) GetStartMid() *MID {
	if m != nil {
		return m.StartMid
	}
	return nil
}

func (m *AuthAck) GetMySig() []byte {
	if m != nil {
		return m.MySig
	}
	return nil
}

type RevealSecret struct {
	PayId []byte `protobuf:"bytes,1,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	// preimage of the hash
	Secret               []byte   `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevealSecret) Reset()         { *m = RevealSecret{} }
func (m *RevealSecret) String() string { return proto.CompactTextString(m) }
func (*RevealSecret) ProtoMessage()    {}
func (*RevealSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}

func (m *RevealSecret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevealSecret.Unmarshal(m, b)
}
func (m *RevealSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevealSecret.Marshal(b, m, deterministic)
}
func (m *RevealSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealSecret.Merge(m, src)
}
func (m *RevealSecret) XXX_Size() int {
	return xxx_messageInfo_RevealSecret.Size(m)
}
func (m *RevealSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealSecret.DiscardUnknown(m)
}

var xxx_messageInfo_RevealSecret proto.InternalMessageInfo

func (m *RevealSecret) GetPayId() []byte {
	if m != nil {
		return m.PayId
	}
	return nil
}

func (m *RevealSecret) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type RevealSecretAck struct {
	// include pay_id for avoid preimage->pay reverse lookup
	PayId []byte `protobuf:"bytes,1,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	// pay dest sign secret to avoid spoof
	PayDestSecretSig     []byte   `protobuf:"bytes,2,opt,name=pay_dest_secret_sig,json=payDestSecretSig,proto3" json:"pay_dest_secret_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevealSecretAck) Reset()         { *m = RevealSecretAck{} }
func (m *RevealSecretAck) String() string { return proto.CompactTextString(m) }
func (*RevealSecretAck) ProtoMessage()    {}
func (*RevealSecretAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{6}
}

func (m *RevealSecretAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevealSecretAck.Unmarshal(m, b)
}
func (m *RevealSecretAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevealSecretAck.Marshal(b, m, deterministic)
}
func (m *RevealSecretAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealSecretAck.Merge(m, src)
}
func (m *RevealSecretAck) XXX_Size() int {
	return xxx_messageInfo_RevealSecretAck.Size(m)
}
func (m *RevealSecretAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealSecretAck.DiscardUnknown(m)
}

var xxx_messageInfo_RevealSecretAck proto.InternalMessageInfo

func (m *RevealSecretAck) GetPayId() []byte {
	if m != nil {
		return m.PayId
	}
	return nil
}

func (m *RevealSecretAck) GetPayDestSecretSig() []byte {
	if m != nil {
		return m.PayDestSecretSig
	}
	return nil
}

// CondPayRequest is the first request setting up a pay path.
type CondPayRequest struct {
	// use serialized entity.ConditionalPay to ensure byte-perfect consistency across all platforms
	// and simplify payment info verification especially during on-chain settlement
	CondPay              []byte              `protobuf:"bytes,1,opt,name=cond_pay,json=condPay,proto3" json:"cond_pay,omitempty"`
	StateOnlyPeerFromSig *SignedSimplexState `protobuf:"bytes,2,opt,name=state_only_peer_from_sig,json=stateOnlyPeerFromSig,proto3" json:"state_only_peer_from_sig,omitempty"`
	Note                 *any.Any            `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	// Sequence num of the previous simplex state that this new state is based on.
	// Useful for failure recover.
	BaseSeq uint64 `protobuf:"varint,4,opt,name=base_seq,json=baseSeq,proto3" json:"base_seq,omitempty"`
	// Optimization: payment between direct peers needs only one roundtrip.
	// A direct payment is one where the source and destination of the payment
	// are directly-connected peers (e.g. client sending a payment to its OSP)
	// and the payment is unconditional.
	DirectPay            bool     `protobuf:"varint,5,opt,name=direct_pay,json=directPay,proto3" json:"direct_pay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CondPayRequest) Reset()         { *m = CondPayRequest{} }
func (m *CondPayRequest) String() string { return proto.CompactTextString(m) }
func (*CondPayRequest) ProtoMessage()    {}
func (*CondPayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{7}
}

func (m *CondPayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CondPayRequest.Unmarshal(m, b)
}
func (m *CondPayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CondPayRequest.Marshal(b, m, deterministic)
}
func (m *CondPayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CondPayRequest.Merge(m, src)
}
func (m *CondPayRequest) XXX_Size() int {
	return xxx_messageInfo_CondPayRequest.Size(m)
}
func (m *CondPayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CondPayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CondPayRequest proto.InternalMessageInfo

func (m *CondPayRequest) GetCondPay() []byte {
	if m != nil {
		return m.CondPay
	}
	return nil
}

func (m *CondPayRequest) GetStateOnlyPeerFromSig() *SignedSimplexState {
	if m != nil {
		return m.StateOnlyPeerFromSig
	}
	return nil
}

func (m *CondPayRequest) GetNote() *any.Any {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *CondPayRequest) GetBaseSeq() uint64 {
	if m != nil {
		return m.BaseSeq
	}
	return 0
}

func (m *CondPayRequest) GetDirectPay() bool {
	if m != nil {
		return m.DirectPay
	}
	return false
}

// CondPayResponse is returning the signature of the other side in PSC.
type CondPayResponse struct {
	StateCosigned        *SignedSimplexState `protobuf:"bytes,1,opt,name=state_cosigned,json=stateCosigned,proto3" json:"state_cosigned,omitempty"`
	Error                *Error              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CondPayResponse) Reset()         { *m = CondPayResponse{} }
func (m *CondPayResponse) String() string { return proto.CompactTextString(m) }
func (*CondPayResponse) ProtoMessage()    {}
func (*CondPayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{8}
}

func (m *CondPayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CondPayResponse.Unmarshal(m, b)
}
func (m *CondPayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CondPayResponse.Marshal(b, m, deterministic)
}
func (m *CondPayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CondPayResponse.Merge(m, src)
}
func (m *CondPayResponse) XXX_Size() int {
	return xxx_messageInfo_CondPayResponse.Size(m)
}
func (m *CondPayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CondPayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CondPayResponse proto.InternalMessageInfo

func (m *CondPayResponse) GetStateCosigned() *SignedSimplexState {
	if m != nil {
		return m.StateCosigned
	}
	return nil
}

func (m *CondPayResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// Next Tag: 3
type SettledPayment struct {
	SettledPayId         []byte              `protobuf:"bytes,1,opt,name=settled_pay_id,json=settledPayId,proto3" json:"settled_pay_id,omitempty"`
	Reason               PaymentSettleReason `protobuf:"varint,2,opt,name=reason,proto3,enum=rpc.PaymentSettleReason" json:"reason,omitempty"`
	Amount               []byte              `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SettledPayment) Reset()         { *m = SettledPayment{} }
func (m *SettledPayment) String() string { return proto.CompactTextString(m) }
func (*SettledPayment) ProtoMessage()    {}
func (*SettledPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{9}
}

func (m *SettledPayment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettledPayment.Unmarshal(m, b)
}
func (m *SettledPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettledPayment.Marshal(b, m, deterministic)
}
func (m *SettledPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettledPayment.Merge(m, src)
}
func (m *SettledPayment) XXX_Size() int {
	return xxx_messageInfo_SettledPayment.Size(m)
}
func (m *SettledPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_SettledPayment.DiscardUnknown(m)
}

var xxx_messageInfo_SettledPayment proto.InternalMessageInfo

func (m *SettledPayment) GetSettledPayId() []byte {
	if m != nil {
		return m.SettledPayId
	}
	return nil
}

func (m *SettledPayment) GetReason() PaymentSettleReason {
	if m != nil {
		return m.Reason
	}
	return PaymentSettleReason_PAY_VOUCHED
}

func (m *SettledPayment) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

// PaymentSettleProof provides all condition results to settle a pay.
// Expect after receives this msg, peer will send PaymentSettleRequest
// Next Tag: 3
type PaymentSettleProof struct {
	VouchedCondPayResults []*entity.VouchedCondPayResult `protobuf:"bytes,1,rep,name=vouched_cond_pay_results,json=vouchedCondPayResults,proto3" json:"vouched_cond_pay_results,omitempty"`
	// valid reasons for settled_pays in PaymentSettleProof
	// EXPIRED, REJECTED, RESOLVED_ONCHAIN, DEST_UNREACHABLE
	SettledPays          []*SettledPayment `protobuf:"bytes,2,rep,name=settled_pays,json=settledPays,proto3" json:"settled_pays,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PaymentSettleProof) Reset()         { *m = PaymentSettleProof{} }
func (m *PaymentSettleProof) String() string { return proto.CompactTextString(m) }
func (*PaymentSettleProof) ProtoMessage()    {}
func (*PaymentSettleProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{10}
}

func (m *PaymentSettleProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentSettleProof.Unmarshal(m, b)
}
func (m *PaymentSettleProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentSettleProof.Marshal(b, m, deterministic)
}
func (m *PaymentSettleProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSettleProof.Merge(m, src)
}
func (m *PaymentSettleProof) XXX_Size() int {
	return xxx_messageInfo_PaymentSettleProof.Size(m)
}
func (m *PaymentSettleProof) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSettleProof.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSettleProof proto.InternalMessageInfo

func (m *PaymentSettleProof) GetVouchedCondPayResults() []*entity.VouchedCondPayResult {
	if m != nil {
		return m.VouchedCondPayResults
	}
	return nil
}

func (m *PaymentSettleProof) GetSettledPays() []*SettledPayment {
	if m != nil {
		return m.SettledPays
	}
	return nil
}

// When peer_from of a simplex channel wants to settle a pay the updated simplex
// will be sent along with its signature.
type PaymentSettleRequest struct {
	SettledPays          []*SettledPayment   `protobuf:"bytes,1,rep,name=settled_pays,json=settledPays,proto3" json:"settled_pays,omitempty"`
	StateOnlyPeerFromSig *SignedSimplexState `protobuf:"bytes,2,opt,name=state_only_peer_from_sig,json=stateOnlyPeerFromSig,proto3" json:"state_only_peer_from_sig,omitempty"`
	// Sequence num of the previous simplex state that this new state is based on.
	// Useful for failure recover.
	BaseSeq              uint64   `protobuf:"varint,3,opt,name=base_seq,json=baseSeq,proto3" json:"base_seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentSettleRequest) Reset()         { *m = PaymentSettleRequest{} }
func (m *PaymentSettleRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentSettleRequest) ProtoMessage()    {}
func (*PaymentSettleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{11}
}

func (m *PaymentSettleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentSettleRequest.Unmarshal(m, b)
}
func (m *PaymentSettleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentSettleRequest.Marshal(b, m, deterministic)
}
func (m *PaymentSettleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSettleRequest.Merge(m, src)
}
func (m *PaymentSettleRequest) XXX_Size() int {
	return xxx_messageInfo_PaymentSettleRequest.Size(m)
}
func (m *PaymentSettleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSettleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSettleRequest proto.InternalMessageInfo

func (m *PaymentSettleRequest) GetSettledPays() []*SettledPayment {
	if m != nil {
		return m.SettledPays
	}
	return nil
}

func (m *PaymentSettleRequest) GetStateOnlyPeerFromSig() *SignedSimplexState {
	if m != nil {
		return m.StateOnlyPeerFromSig
	}
	return nil
}

func (m *PaymentSettleRequest) GetBaseSeq() uint64 {
	if m != nil {
		return m.BaseSeq
	}
	return 0
}

// peer_to of a simplex channel confirms the settlement by providing its sig
// Next Tag: 4
type PaymentSettleResponse struct {
	StateCosigned        *SignedSimplexState `protobuf:"bytes,1,opt,name=state_cosigned,json=stateCosigned,proto3" json:"state_cosigned,omitempty"`
	Error                *Error              `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PaymentSettleResponse) Reset()         { *m = PaymentSettleResponse{} }
func (m *PaymentSettleResponse) String() string { return proto.CompactTextString(m) }
func (*PaymentSettleResponse) ProtoMessage()    {}
func (*PaymentSettleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{12}
}

func (m *PaymentSettleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentSettleResponse.Unmarshal(m, b)
}
func (m *PaymentSettleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentSettleResponse.Marshal(b, m, deterministic)
}
func (m *PaymentSettleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentSettleResponse.Merge(m, src)
}
func (m *PaymentSettleResponse) XXX_Size() int {
	return xxx_messageInfo_PaymentSettleResponse.Size(m)
}
func (m *PaymentSettleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentSettleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentSettleResponse proto.InternalMessageInfo

func (m *PaymentSettleResponse) GetStateCosigned() *SignedSimplexState {
	if m != nil {
		return m.StateCosigned
	}
	return nil
}

func (m *PaymentSettleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// OpenChannelRequest when one wants to open a channel with peer.
// Next Tag: 5
type OpenChannelRequest struct {
	// serialized entity.PaymentChannelInitializer
	ChannelInitializer []byte        `protobuf:"bytes,1,opt,name=channel_initializer,json=channelInitializer,proto3" json:"channel_initializer,omitempty"`
	RequesterSig       []byte        `protobuf:"bytes,2,opt,name=requester_sig,json=requesterSig,proto3" json:"requester_sig,omitempty"`
	OpenBy             OpenChannelBy `protobuf:"varint,3,opt,name=open_by,json=openBy,proto3,enum=rpc.OpenChannelBy" json:"open_by,omitempty"`
	// osp_to_osp set to true to indicate the channel is an OSP-OSP channel.
	OspToOsp             bool     `protobuf:"varint,4,opt,name=osp_to_osp,json=ospToOsp,proto3" json:"osp_to_osp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenChannelRequest) Reset()         { *m = OpenChannelRequest{} }
func (m *OpenChannelRequest) String() string { return proto.CompactTextString(m) }
func (*OpenChannelRequest) ProtoMessage()    {}
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{13}
}

func (m *OpenChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenChannelRequest.Unmarshal(m, b)
}
func (m *OpenChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenChannelRequest.Marshal(b, m, deterministic)
}
func (m *OpenChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelRequest.Merge(m, src)
}
func (m *OpenChannelRequest) XXX_Size() int {
	return xxx_messageInfo_OpenChannelRequest.Size(m)
}
func (m *OpenChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelRequest proto.InternalMessageInfo

func (m *OpenChannelRequest) GetChannelInitializer() []byte {
	if m != nil {
		return m.ChannelInitializer
	}
	return nil
}

func (m *OpenChannelRequest) GetRequesterSig() []byte {
	if m != nil {
		return m.RequesterSig
	}
	return nil
}

func (m *OpenChannelRequest) GetOpenBy() OpenChannelBy {
	if m != nil {
		return m.OpenBy
	}
	return OpenChannelBy_UNDEFINED_OPEN_BY
}

func (m *OpenChannelRequest) GetOspToOsp() bool {
	if m != nil {
		return m.OspToOsp
	}
	return false
}

// Next Tag: 6
type OpenChannelResponse struct {
	// serialized entity.PaymentChannelInitializer
	ChannelInitializer   []byte            `protobuf:"bytes,1,opt,name=channel_initializer,json=channelInitializer,proto3" json:"channel_initializer,omitempty"`
	RequesterSig         []byte            `protobuf:"bytes,2,opt,name=requester_sig,json=requesterSig,proto3" json:"requester_sig,omitempty"`
	ApproverSig          []byte            `protobuf:"bytes,3,opt,name=approver_sig,json=approverSig,proto3" json:"approver_sig,omitempty"`
	Status               OpenChannelStatus `protobuf:"varint,4,opt,name=status,proto3,enum=rpc.OpenChannelStatus" json:"status,omitempty"`
	PaymentChannelId     []byte            `protobuf:"bytes,5,opt,name=payment_channel_id,json=paymentChannelId,proto3" json:"payment_channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OpenChannelResponse) Reset()         { *m = OpenChannelResponse{} }
func (m *OpenChannelResponse) String() string { return proto.CompactTextString(m) }
func (*OpenChannelResponse) ProtoMessage()    {}
func (*OpenChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{14}
}

func (m *OpenChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenChannelResponse.Unmarshal(m, b)
}
func (m *OpenChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenChannelResponse.Marshal(b, m, deterministic)
}
func (m *OpenChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelResponse.Merge(m, src)
}
func (m *OpenChannelResponse) XXX_Size() int {
	return xxx_messageInfo_OpenChannelResponse.Size(m)
}
func (m *OpenChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelResponse proto.InternalMessageInfo

func (m *OpenChannelResponse) GetChannelInitializer() []byte {
	if m != nil {
		return m.ChannelInitializer
	}
	return nil
}

func (m *OpenChannelResponse) GetRequesterSig() []byte {
	if m != nil {
		return m.RequesterSig
	}
	return nil
}

func (m *OpenChannelResponse) GetApproverSig() []byte {
	if m != nil {
		return m.ApproverSig
	}
	return nil
}

func (m *OpenChannelResponse) GetStatus() OpenChannelStatus {
	if m != nil {
		return m.Status
	}
	return OpenChannelStatus_UNDEFINED_OPEN_CHANNEL_STATUS
}

func (m *OpenChannelResponse) GetPaymentChannelId() []byte {
	if m != nil {
		return m.PaymentChannelId
	}
	return nil
}

// Next Tag: 3
type CooperativeWithdrawRequest struct {
	WithdrawInfo         *entity.CooperativeWithdrawInfo `protobuf:"bytes,1,opt,name=withdraw_info,json=withdrawInfo,proto3" json:"withdraw_info,omitempty"`
	RequesterSig         []byte                          `protobuf:"bytes,2,opt,name=requester_sig,json=requesterSig,proto3" json:"requester_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CooperativeWithdrawRequest) Reset()         { *m = CooperativeWithdrawRequest{} }
func (m *CooperativeWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*CooperativeWithdrawRequest) ProtoMessage()    {}
func (*CooperativeWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{15}
}

func (m *CooperativeWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CooperativeWithdrawRequest.Unmarshal(m, b)
}
func (m *CooperativeWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CooperativeWithdrawRequest.Marshal(b, m, deterministic)
}
func (m *CooperativeWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CooperativeWithdrawRequest.Merge(m, src)
}
func (m *CooperativeWithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_CooperativeWithdrawRequest.Size(m)
}
func (m *CooperativeWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CooperativeWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CooperativeWithdrawRequest proto.InternalMessageInfo

func (m *CooperativeWithdrawRequest) GetWithdrawInfo() *entity.CooperativeWithdrawInfo {
	if m != nil {
		return m.WithdrawInfo
	}
	return nil
}

func (m *CooperativeWithdrawRequest) GetRequesterSig() []byte {
	if m != nil {
		return m.RequesterSig
	}
	return nil
}

// Next Tag: 4
type CooperativeWithdrawResponse struct {
	WithdrawInfo         *entity.CooperativeWithdrawInfo `protobuf:"bytes,1,opt,name=withdraw_info,json=withdrawInfo,proto3" json:"withdraw_info,omitempty"`
	RequesterSig         []byte                          `protobuf:"bytes,2,opt,name=requester_sig,json=requesterSig,proto3" json:"requester_sig,omitempty"`
	ApproverSig          []byte                          `protobuf:"bytes,3,opt,name=approver_sig,json=approverSig,proto3" json:"approver_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CooperativeWithdrawResponse) Reset()         { *m = CooperativeWithdrawResponse{} }
func (m *CooperativeWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*CooperativeWithdrawResponse) ProtoMessage()    {}
func (*CooperativeWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{16}
}

func (m *CooperativeWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CooperativeWithdrawResponse.Unmarshal(m, b)
}
func (m *CooperativeWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CooperativeWithdrawResponse.Marshal(b, m, deterministic)
}
func (m *CooperativeWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CooperativeWithdrawResponse.Merge(m, src)
}
func (m *CooperativeWithdrawResponse) XXX_Size() int {
	return xxx_messageInfo_CooperativeWithdrawResponse.Size(m)
}
func (m *CooperativeWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CooperativeWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CooperativeWithdrawResponse proto.InternalMessageInfo

func (m *CooperativeWithdrawResponse) GetWithdrawInfo() *entity.CooperativeWithdrawInfo {
	if m != nil {
		return m.WithdrawInfo
	}
	return nil
}

func (m *CooperativeWithdrawResponse) GetRequesterSig() []byte {
	if m != nil {
		return m.RequesterSig
	}
	return nil
}

func (m *CooperativeWithdrawResponse) GetApproverSig() []byte {
	if m != nil {
		return m.ApproverSig
	}
	return nil
}

// Next Tag: 3
type CondPayReceipt struct {
	// refer to pay by its id is enough
	PayId                []byte   `protobuf:"bytes,1,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	PayDestSig           []byte   `protobuf:"bytes,2,opt,name=pay_dest_sig,json=payDestSig,proto3" json:"pay_dest_sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CondPayReceipt) Reset()         { *m = CondPayReceipt{} }
func (m *CondPayReceipt) String() string { return proto.CompactTextString(m) }
func (*CondPayReceipt) ProtoMessage()    {}
func (*CondPayReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{17}
}

func (m *CondPayReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CondPayReceipt.Unmarshal(m, b)
}
func (m *CondPayReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CondPayReceipt.Marshal(b, m, deterministic)
}
func (m *CondPayReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CondPayReceipt.Merge(m, src)
}
func (m *CondPayReceipt) XXX_Size() int {
	return xxx_messageInfo_CondPayReceipt.Size(m)
}
func (m *CondPayReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_CondPayReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_CondPayReceipt proto.InternalMessageInfo

func (m *CondPayReceipt) GetPayId() []byte {
	if m != nil {
		return m.PayId
	}
	return nil
}

func (m *CondPayReceipt) GetPayDestSig() []byte {
	if m != nil {
		return m.PayDestSig
	}
	return nil
}

// Next Tag: 4
type SignedSimplexState struct {
	// serialized simplexPaymentChannel message
	SimplexState         []byte   `protobuf:"bytes,1,opt,name=simplex_state,json=simplexState,proto3" json:"simplex_state,omitempty"`
	SigOfPeerFrom        []byte   `protobuf:"bytes,2,opt,name=sig_of_peer_from,json=sigOfPeerFrom,proto3" json:"sig_of_peer_from,omitempty"`
	SigOfPeerTo          []byte   `protobuf:"bytes,3,opt,name=sig_of_peer_to,json=sigOfPeerTo,proto3" json:"sig_of_peer_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedSimplexState) Reset()         { *m = SignedSimplexState{} }
func (m *SignedSimplexState) String() string { return proto.CompactTextString(m) }
func (*SignedSimplexState) ProtoMessage()    {}
func (*SignedSimplexState) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{18}
}

func (m *SignedSimplexState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedSimplexState.Unmarshal(m, b)
}
func (m *SignedSimplexState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedSimplexState.Marshal(b, m, deterministic)
}
func (m *SignedSimplexState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedSimplexState.Merge(m, src)
}
func (m *SignedSimplexState) XXX_Size() int {
	return xxx_messageInfo_SignedSimplexState.Size(m)
}
func (m *SignedSimplexState) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedSimplexState.DiscardUnknown(m)
}

var xxx_messageInfo_SignedSimplexState proto.InternalMessageInfo

func (m *SignedSimplexState) GetSimplexState() []byte {
	if m != nil {
		return m.SimplexState
	}
	return nil
}

func (m *SignedSimplexState) GetSigOfPeerFrom() []byte {
	if m != nil {
		return m.SigOfPeerFrom
	}
	return nil
}

func (m *SignedSimplexState) GetSigOfPeerTo() []byte {
	if m != nil {
		return m.SigOfPeerTo
	}
	return nil
}

// Next Tag: 2
type SignedDuplexState struct {
	// only expect two messages for duplex
	SimplexStates        []*SignedSimplexState `protobuf:"bytes,1,rep,name=simplex_states,json=simplexStates,proto3" json:"simplex_states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignedDuplexState) Reset()         { *m = SignedDuplexState{} }
func (m *SignedDuplexState) String() string { return proto.CompactTextString(m) }
func (*SignedDuplexState) ProtoMessage()    {}
func (*SignedDuplexState) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{19}
}

func (m *SignedDuplexState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedDuplexState.Unmarshal(m, b)
}
func (m *SignedDuplexState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedDuplexState.Marshal(b, m, deterministic)
}
func (m *SignedDuplexState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedDuplexState.Merge(m, src)
}
func (m *SignedDuplexState) XXX_Size() int {
	return xxx_messageInfo_SignedDuplexState.Size(m)
}
func (m *SignedDuplexState) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedDuplexState.DiscardUnknown(m)
}

var xxx_messageInfo_SignedDuplexState proto.InternalMessageInfo

func (m *SignedDuplexState) GetSimplexStates() []*SignedSimplexState {
	if m != nil {
		return m.SimplexStates
	}
	return nil
}

func init() {
	proto.RegisterEnum("rpc.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("rpc.PaymentSettleReason", PaymentSettleReason_name, PaymentSettleReason_value)
	proto.RegisterEnum("rpc.OpenChannelBy", OpenChannelBy_name, OpenChannelBy_value)
	proto.RegisterEnum("rpc.OpenChannelStatus", OpenChannelStatus_name, OpenChannelStatus_value)
	proto.RegisterType((*MID)(nil), "rpc.MID")
	proto.RegisterType((*CelerMsg)(nil), "rpc.CelerMsg")
	proto.RegisterType((*Error)(nil), "rpc.Error")
	proto.RegisterType((*AuthReq)(nil), "rpc.AuthReq")
	proto.RegisterType((*AuthAck)(nil), "rpc.AuthAck")
	proto.RegisterType((*RevealSecret)(nil), "rpc.RevealSecret")
	proto.RegisterType((*RevealSecretAck)(nil), "rpc.RevealSecretAck")
	proto.RegisterType((*CondPayRequest)(nil), "rpc.CondPayRequest")
	proto.RegisterType((*CondPayResponse)(nil), "rpc.CondPayResponse")
	proto.RegisterType((*SettledPayment)(nil), "rpc.SettledPayment")
	proto.RegisterType((*PaymentSettleProof)(nil), "rpc.PaymentSettleProof")
	proto.RegisterType((*PaymentSettleRequest)(nil), "rpc.PaymentSettleRequest")
	proto.RegisterType((*PaymentSettleResponse)(nil), "rpc.PaymentSettleResponse")
	proto.RegisterType((*OpenChannelRequest)(nil), "rpc.OpenChannelRequest")
	proto.RegisterType((*OpenChannelResponse)(nil), "rpc.OpenChannelResponse")
	proto.RegisterType((*CooperativeWithdrawRequest)(nil), "rpc.CooperativeWithdrawRequest")
	proto.RegisterType((*CooperativeWithdrawResponse)(nil), "rpc.CooperativeWithdrawResponse")
	proto.RegisterType((*CondPayReceipt)(nil), "rpc.CondPayReceipt")
	proto.RegisterType((*SignedSimplexState)(nil), "rpc.SignedSimplexState")
	proto.RegisterType((*SignedDuplexState)(nil), "rpc.SignedDuplexState")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 1764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x2d, 0x5b, 0x92, 0x9f, 0x65, 0x99, 0x1e, 0x7f, 0x84, 0xf6, 0x26, 0x88, 0xa2, 0x6c,
	0x51, 0x6f, 0xda, 0x95, 0x8b, 0x14, 0x28, 0x7a, 0x69, 0x0b, 0x7d, 0x70, 0x23, 0x35, 0xb6, 0xa8,
	0x8c, 0x24, 0x27, 0x59, 0x14, 0x20, 0x68, 0x72, 0x2c, 0x13, 0x91, 0x38, 0x0c, 0x39, 0xb2, 0x97,
	0x3d, 0xf5, 0xd6, 0x5e, 0x8a, 0x1e, 0x8b, 0x9e, 0x7b, 0xec, 0xb9, 0x97, 0xfe, 0x35, 0xfd, 0x03,
	0xfa, 0x47, 0x14, 0xf3, 0x41, 0x89, 0x92, 0xe5, 0x6d, 0x0e, 0xe9, 0x9e, 0xc4, 0x79, 0x1f, 0xbf,
	0x79, 0xf3, 0xe6, 0xbd, 0xdf, 0x1b, 0x08, 0x76, 0x26, 0x24, 0x8e, 0x9d, 0x11, 0xa9, 0x85, 0x11,
	0x65, 0x14, 0xe5, 0xa2, 0xd0, 0x3d, 0x29, 0x91, 0x80, 0xf9, 0x2c, 0x91, 0xa2, 0x93, 0xe3, 0x11,
	0xa5, 0xa3, 0x31, 0x39, 0x13, 0xab, 0xab, 0xe9, 0xf5, 0x99, 0x13, 0x28, 0x55, 0xf5, 0x2b, 0xc8,
	0x5d, 0x74, 0x5a, 0x48, 0x87, 0x1c, 0x73, 0x46, 0x86, 0x56, 0xd1, 0x4e, 0xb7, 0x30, 0xff, 0xe4,
	0x92, 0x98, 0x7c, 0x34, 0xd6, 0x2b, 0xda, 0xe9, 0x06, 0xe6, 0x9f, 0xd5, 0x3f, 0x6d, 0x41, 0xb1,
	0x49, 0xc6, 0x24, 0xba, 0x88, 0x47, 0xe8, 0x04, 0x72, 0x13, 0xdf, 0x13, 0x0e, 0xdb, 0x2f, 0x8b,
	0xb5, 0x28, 0x74, 0x6b, 0x17, 0x9d, 0x16, 0xe6, 0x42, 0xf4, 0x0c, 0x0a, 0x11, 0x61, 0x36, 0xd7,
	0xaf, 0x2f, 0xe9, 0xf3, 0x11, 0x61, 0x17, 0xbe, 0x87, 0x10, 0x6c, 0x5c, 0x8f, 0x9d, 0x91, 0x91,
	0x13, 0xf0, 0xe2, 0x1b, 0x3d, 0x82, 0x02, 0xa3, 0xb6, 0xe3, 0x79, 0x91, 0xb1, 0x51, 0xd1, 0x4e,
	0x4b, 0x38, 0xcf, 0x68, 0xdd, 0xf3, 0x22, 0x54, 0x85, 0x4d, 0x12, 0x45, 0x34, 0x32, 0xf2, 0x02,
	0x0d, 0x04, 0x9a, 0xc9, 0x25, 0xed, 0x35, 0x2c, 0x55, 0xe8, 0x2b, 0x28, 0x3a, 0x53, 0x76, 0x63,
	0x47, 0xe4, 0xa3, 0x51, 0x10, 0x66, 0x25, 0x61, 0x56, 0x9f, 0xb2, 0x1b, 0x4c, 0x3e, 0xb6, 0xd7,
	0x70, 0xc1, 0x91, 0x9f, 0x33, 0x53, 0xc7, 0xfd, 0x60, 0x14, 0x97, 0x4c, 0xeb, 0xee, 0x87, 0xd4,
	0xb4, 0xee, 0x7e, 0x40, 0xbf, 0x01, 0xdd, 0xa5, 0x81, 0x67, 0x87, 0x4e, 0xc2, 0x91, 0xa7, 0x24,
	0x66, 0xc6, 0x96, 0x70, 0xd9, 0x17, 0x2e, 0x4d, 0x1a, 0x78, 0x3d, 0x27, 0xc1, 0x52, 0xd5, 0x5e,
	0xc3, 0x65, 0x77, 0x41, 0x82, 0x1a, 0xb0, 0x97, 0x01, 0x88, 0x43, 0x1a, 0xc4, 0xc4, 0x00, 0x81,
	0x70, 0xb0, 0x88, 0x20, 0x75, 0xed, 0x35, 0xbc, 0xeb, 0x2e, 0x8a, 0xd0, 0x6b, 0x38, 0x08, 0x9d,
	0x64, 0x42, 0x02, 0x66, 0xc7, 0x84, 0xb1, 0x31, 0xb1, 0xc3, 0x88, 0xd2, 0x6b, 0x63, 0x5b, 0xc0,
	0x3c, 0x12, 0x30, 0x3d, 0x69, 0xd0, 0x17, 0xfa, 0x1e, 0x57, 0xb7, 0xd7, 0x30, 0x0a, 0xef, 0x49,
	0xd1, 0x1b, 0x38, 0x5a, 0x02, 0x4b, 0xcf, 0x55, 0x12, 0x70, 0xc7, 0xf7, 0xe1, 0xe6, 0xa7, 0x3b,
	0x08, 0x57, 0xc8, 0xd1, 0x00, 0x1e, 0xdd, 0x83, 0x54, 0x27, 0xdd, 0x11, 0x98, 0x27, 0xab, 0x30,
	0x67, 0xe7, 0x3d, 0x0c, 0x57, 0x29, 0xd0, 0x39, 0xe8, 0x77, 0x3e, 0xbb, 0xf1, 0x22, 0xe7, 0x6e,
	0x16, 0x62, 0x59, 0xc0, 0x3d, 0x55, 0x89, 0xa3, 0x21, 0x89, 0x1c, 0xe6, 0xdf, 0x92, 0xb7, 0xca,
	0x6e, 0x1e, 0xe8, 0xee, 0xdd, 0xa2, 0x08, 0x59, 0xb0, 0x97, 0x41, 0x53, 0xd1, 0xed, 0x0a, 0xb8,
	0xca, 0xc3, 0x70, 0xb3, 0x18, 0xf5, 0xbb, 0x25, 0xd9, 0x52, 0x65, 0xb8, 0xc4, 0x0f, 0x99, 0xf1,
	0x74, 0x55, 0x65, 0x08, 0xd5, 0x42, 0x65, 0x08, 0x09, 0xfa, 0x25, 0xec, 0x44, 0xe4, 0x96, 0x38,
	0x63, 0x3b, 0x26, 0x6e, 0x44, 0x98, 0x51, 0x11, 0xde, 0x7b, 0xc2, 0x1b, 0x0b, 0x4d, 0x5f, 0x28,
	0xda, 0x6b, 0xb8, 0x14, 0x65, 0xd6, 0xbc, 0xa6, 0x16, 0x3c, 0x45, 0x21, 0x3f, 0xcb, 0xd4, 0x54,
	0xd6, 0x5b, 0x16, 0xf4, 0x6e, 0xb4, 0x28, 0x42, 0x6f, 0xc1, 0x50, 0x25, 0x39, 0x1d, 0x33, 0xfb,
	0x96, 0x4e, 0xdd, 0x9b, 0x59, 0x96, 0xab, 0x02, 0xea, 0x71, 0x4d, 0x51, 0xc8, 0x25, 0x57, 0x12,
	0x6f, 0x5e, 0xa8, 0xd3, 0x31, 0x53, 0xd7, 0x26, 0x17, 0xc2, 0x20, 0x4d, 0xf4, 0x7b, 0x38, 0x5e,
	0x01, 0xac, 0x12, 0xfe, 0xfc, 0x93, 0x90, 0x8f, 0x96, 0x91, 0xa5, 0x77, 0x63, 0x0b, 0x0a, 0x8a,
	0xe9, 0xaa, 0x7d, 0xd8, 0x14, 0xfd, 0x8f, 0x2a, 0xb0, 0xe1, 0x52, 0x8f, 0x08, 0x1e, 0x2a, 0xab,
	0x3e, 0x36, 0xa3, 0xa8, 0x49, 0x3d, 0x82, 0x85, 0x06, 0x1d, 0x41, 0x3e, 0x22, 0x4e, 0x4c, 0x03,
	0xc1, 0x45, 0x5b, 0x58, 0xad, 0x52, 0x7e, 0xcb, 0xcd, 0xf9, 0xed, 0x6f, 0x1a, 0x14, 0x14, 0x5d,
	0x70, 0x2e, 0x9a, 0x24, 0x92, 0x8b, 0x34, 0xc9, 0x45, 0x93, 0x44, 0x70, 0xd1, 0x63, 0xd8, 0x62,
	0xfe, 0x84, 0xc4, 0xcc, 0x99, 0x84, 0x8a, 0x1c, 0xe7, 0x02, 0x74, 0x08, 0xf9, 0x49, 0x62, 0xc7,
	0xbe, 0x24, 0xb6, 0x12, 0xde, 0x9c, 0x24, 0x7d, 0x7f, 0x84, 0x9e, 0xc2, 0x36, 0xf9, 0x2e, 0x24,
	0x2e, 0xb3, 0x43, 0x42, 0x52, 0x76, 0x03, 0x29, 0xea, 0x11, 0x12, 0x71, 0x83, 0xc9, 0x94, 0x4d,
	0x9d, 0xb1, 0xcd, 0x99, 0xc7, 0xd8, 0xac, 0x68, 0xa7, 0x45, 0x0c, 0x52, 0xc4, 0x43, 0xaa, 0xbe,
	0x92, 0xa1, 0xf1, 0xab, 0xfb, 0x11, 0x6c, 0xc5, 0xcc, 0x89, 0x24, 0xbf, 0x2e, 0xf3, 0x6f, 0x51,
	0xa8, 0x38, 0xc3, 0xce, 0x43, 0x59, 0xcf, 0x84, 0x52, 0xfd, 0x15, 0x94, 0xb2, 0xe5, 0xc1, 0xcd,
	0xf8, 0x7d, 0x29, 0xa8, 0x12, 0xde, 0x0c, 0x9d, 0xa4, 0xe3, 0xf1, 0xac, 0xa9, 0xb2, 0x94, 0xde,
	0x6a, 0x55, 0x7d, 0x0b, 0xbb, 0x4b, 0xd5, 0xf5, 0x10, 0xc2, 0xd7, 0xb0, 0xcf, 0xc5, 0x1e, 0x89,
	0x59, 0x5a, 0xa7, 0xf3, 0x60, 0xf4, 0xd0, 0x49, 0x5a, 0x24, 0x66, 0x12, 0x85, 0xc7, 0xf5, 0x6f,
	0x0d, 0xca, 0x8b, 0x6c, 0x8a, 0x8e, 0xa1, 0x98, 0xb6, 0x98, 0x82, 0x2e, 0xa8, 0x1e, 0x42, 0x16,
	0x18, 0x31, 0x73, 0x18, 0xb1, 0x69, 0x30, 0x4e, 0x44, 0x52, 0xed, 0xeb, 0x88, 0x4e, 0x66, 0x3b,
	0xa4, 0xb4, 0xd8, 0xf7, 0x47, 0x01, 0xf1, 0xfa, 0xfe, 0x24, 0x1c, 0x93, 0xef, 0xfa, 0xdc, 0x03,
	0x1f, 0x08, 0x47, 0x2b, 0x18, 0x27, 0x3c, 0xf3, 0xdf, 0x44, 0x74, 0xc2, 0x6f, 0xe8, 0x14, 0x36,
	0x02, 0xca, 0x88, 0xb8, 0x36, 0xde, 0x46, 0x72, 0x60, 0xd6, 0xd2, 0x81, 0x59, 0xab, 0x07, 0x09,
	0x16, 0x16, 0x3c, 0xaa, 0x2b, 0x27, 0x26, 0x36, 0x2f, 0x9e, 0x0d, 0x71, 0xff, 0x05, 0xbe, 0xee,
	0x93, 0x8f, 0xe8, 0x09, 0x80, 0xe7, 0x47, 0xe2, 0x9a, 0x9d, 0x44, 0x5d, 0xe2, 0x96, 0x94, 0xf4,
	0x9c, 0xa4, 0x1a, 0xc3, 0xee, 0x12, 0xdb, 0xa3, 0x5f, 0x43, 0x59, 0x9e, 0xc3, 0xa5, 0xb1, 0x08,
	0x55, 0x5d, 0xe8, 0x83, 0xd1, 0xef, 0x08, 0xf3, 0xa6, 0xb2, 0x46, 0x95, 0x74, 0x32, 0xae, 0x2f,
	0x4f, 0x46, 0x35, 0x17, 0xab, 0x7f, 0xd0, 0xa0, 0x2c, 0x99, 0xd5, 0x53, 0x04, 0x8c, 0xbe, 0x84,
	0xb2, 0xe4, 0x69, 0xc9, 0x5e, 0xb3, 0x8b, 0x2b, 0xc5, 0x33, 0xbb, 0x8e, 0x87, 0x7e, 0xb6, 0xd0,
	0x37, 0xe5, 0x97, 0xc6, 0x2a, 0x12, 0xe7, 0xfa, 0x59, 0x47, 0x1d, 0x41, 0xde, 0x99, 0xd0, 0x69,
	0xc0, 0x54, 0xf1, 0xab, 0x55, 0xf5, 0xef, 0x1a, 0xa0, 0xfb, 0xf3, 0x09, 0x0d, 0xc1, 0xb8, 0x95,
	0x04, 0x60, 0x67, 0x47, 0xe4, 0x74, 0xcc, 0x62, 0x43, 0xab, 0xe4, 0xfe, 0x17, 0x51, 0xe0, 0xc3,
	0xdb, 0x15, 0xd2, 0x18, 0xfd, 0x02, 0x4a, 0x99, 0xd3, 0xc5, 0xc6, 0xba, 0x80, 0x92, 0xa4, 0xbc,
	0x98, 0x08, 0xbc, 0x3d, 0x3f, 0x70, 0x5c, 0xfd, 0x97, 0x06, 0x07, 0xab, 0xc6, 0xde, 0x3d, 0x40,
	0xed, 0xd3, 0x00, 0x3f, 0x7f, 0x8d, 0x66, 0x2b, 0x2f, 0xb7, 0x50, 0x79, 0xd5, 0x04, 0x0e, 0x57,
	0x8e, 0xd7, 0xcf, 0x57, 0x60, 0xb9, 0x87, 0x0a, 0xec, 0x9f, 0x1a, 0x20, 0x2b, 0x24, 0x41, 0xf3,
	0xc6, 0x09, 0x02, 0x32, 0x4e, 0xb3, 0x76, 0x06, 0xfb, 0xae, 0x94, 0xd8, 0x7e, 0xe0, 0x33, 0xdf,
	0x19, 0xfb, 0xbf, 0x27, 0x29, 0x99, 0x22, 0xa5, 0xea, 0xcc, 0x35, 0xe8, 0x39, 0x9f, 0x87, 0xc2,
	0x97, 0x44, 0x19, 0xa6, 0x28, 0xcd, 0x84, 0x3c, 0x05, 0x3f, 0x81, 0x02, 0x0d, 0x49, 0x60, 0x5f,
	0x25, 0x22, 0xa0, 0xf2, 0x4b, 0x24, 0x02, 0xca, 0xec, 0xdf, 0x48, 0x70, 0x9e, 0x9b, 0x34, 0x12,
	0xf4, 0x18, 0x80, 0xc6, 0xa1, 0xcd, 0xa8, 0x4d, 0xe3, 0x50, 0xf4, 0x6a, 0x11, 0x17, 0x69, 0x1c,
	0x0e, 0xa8, 0x15, 0x87, 0xd5, 0xff, 0x68, 0xb0, 0xbf, 0x10, 0xb7, 0xca, 0xd8, 0xff, 0x27, 0xf0,
	0x67, 0x50, 0x72, 0xc2, 0x30, 0xa2, 0xb7, 0xca, 0x46, 0x76, 0xc8, 0x76, 0x2a, 0xe3, 0x26, 0x35,
	0xc8, 0xf3, 0xdc, 0x4f, 0x63, 0x11, 0x6a, 0xf9, 0xe5, 0xd1, 0xf2, 0xd1, 0xfa, 0x42, 0x8b, 0x95,
	0x15, 0xfa, 0x29, 0xa4, 0xef, 0x3b, 0x7b, 0x16, 0xb0, 0x27, 0x58, 0x47, 0xf2, 0x2b, 0xd7, 0x28,
	0xcf, 0x8e, 0x57, 0xfd, 0xa3, 0x06, 0x27, 0x0f, 0x3f, 0x99, 0x50, 0x0b, 0x76, 0x66, 0xef, 0x23,
	0x3f, 0xb8, 0xa6, 0xaa, 0x4c, 0x9e, 0xa6, 0x1d, 0xb8, 0xc2, 0xb5, 0x13, 0x5c, 0x53, 0x5c, 0xba,
	0xcb, 0xac, 0x3e, 0x29, 0x15, 0xd5, 0x7f, 0x68, 0xf0, 0xc5, 0xf7, 0xbc, 0xb6, 0x7e, 0xc0, 0x50,
	0x3e, 0xe1, 0x56, 0xaa, 0x9d, 0xcc, 0x58, 0x92, 0x0f, 0xb7, 0x07, 0xe6, 0x5d, 0x05, 0x4a, 0xf3,
	0x79, 0x37, 0xdb, 0x0f, 0xd2, 0x41, 0xe7, 0x8f, 0xf8, 0x15, 0xa0, 0xfb, 0x1d, 0xc7, 0x23, 0x8d,
	0xe5, 0xda, 0x16, 0xbd, 0x37, 0x63, 0xe3, 0xac, 0xd1, 0x8f, 0x41, 0x8f, 0xfd, 0x91, 0x4d, 0xaf,
	0xe7, 0x44, 0xa2, 0x76, 0xd8, 0x89, 0xfd, 0x91, 0x75, 0x9d, 0xf2, 0x04, 0x7a, 0x0e, 0xe5, 0xac,
	0x21, 0xa3, 0xe9, 0xa1, 0x66, 0x66, 0x03, 0x5a, 0xed, 0xc3, 0x9e, 0x0c, 0xa4, 0x35, 0x9d, 0x6f,
	0xc1, 0xa9, 0x22, 0x1b, 0x47, 0xca, 0x74, 0xdf, 0x43, 0x15, 0x99, 0x55, 0xfc, 0xe2, 0xaf, 0x1a,
	0x14, 0xd4, 0xd3, 0x0b, 0xe5, 0x61, 0xdd, 0x7a, 0xad, 0xaf, 0x21, 0x1d, 0x4a, 0xc3, 0x6e, 0x7d,
	0x38, 0x68, 0x5b, 0xb8, 0xf3, 0xad, 0xd9, 0xd2, 0x35, 0xb4, 0x0b, 0xdb, 0x9d, 0xee, 0x65, 0xfd,
	0xbc, 0xd3, 0xb2, 0xfb, 0x9d, 0x57, 0xfa, 0x3a, 0xda, 0x87, 0xdd, 0x4e, 0xb7, 0x69, 0x61, 0x6c,
	0x36, 0x07, 0x76, 0xf3, 0xdc, 0x6a, 0xbe, 0xd6, 0x73, 0xa8, 0x0c, 0xf0, 0x16, 0x5b, 0xdd, 0x57,
	0x76, 0xcf, 0x34, 0xb1, 0xbe, 0x21, 0x8d, 0x94, 0x97, 0xf9, 0xc6, 0xee, 0x0e, 0x2f, 0xf4, 0x4d,
	0x84, 0xa0, 0xdc, 0xab, 0xbf, 0xb7, 0xb1, 0x35, 0x1c, 0x98, 0xf6, 0xb9, 0x65, 0xf5, 0xf4, 0x3c,
	0x37, 0xec, 0x5a, 0x4a, 0x34, 0xb0, 0xec, 0x56, 0x7f, 0xa0, 0x17, 0x5e, 0xfc, 0x45, 0x83, 0xfd,
	0x15, 0x83, 0x8b, 0xc7, 0xc2, 0x01, 0x2e, 0xad, 0x61, 0xb3, 0x6d, 0xb6, 0xf4, 0xb5, 0x54, 0x60,
	0xbe, 0xeb, 0x75, 0xb0, 0x88, 0x56, 0x87, 0x92, 0xd8, 0xc2, 0xfc, 0xad, 0xd9, 0x1c, 0x98, 0x2d,
	0x7d, 0x1d, 0x19, 0x70, 0x20, 0x25, 0x7d, 0xeb, 0xfc, 0xd2, 0x6c, 0xd9, 0x56, 0xb7, 0xd9, 0xae,
	0x77, 0xba, 0x7a, 0x2e, 0xb5, 0xed, 0xd5, 0x3b, 0x2d, 0xfb, 0xa2, 0xfe, 0x4e, 0xdf, 0x48, 0x6d,
	0x5b, 0x66, 0x7f, 0x60, 0x0f, 0xbb, 0xd8, 0xac, 0x37, 0xdb, 0xf5, 0xc6, 0xb9, 0xa9, 0x6f, 0xbe,
	0xf8, 0x1d, 0xec, 0x2c, 0x70, 0x16, 0x3a, 0x84, 0xbd, 0x61, 0xb7, 0x65, 0x7e, 0xd3, 0xe9, 0x72,
	0xcc, 0x9e, 0xd9, 0xb5, 0x1b, 0xef, 0xf5, 0x35, 0x74, 0x0c, 0x87, 0x62, 0xd1, 0x6c, 0xd7, 0xbb,
	0x5d, 0xf3, 0xdc, 0xee, 0x61, 0xab, 0x67, 0xf5, 0x4d, 0xac, 0x6b, 0xf7, 0x54, 0xf5, 0x5e, 0x0f,
	0x5b, 0x97, 0x26, 0xd6, 0xd7, 0x5f, 0xfc, 0x59, 0x83, 0xbd, 0x7b, 0xbc, 0x81, 0x9e, 0xc1, 0x93,
	0xa5, 0x2d, 0x52, 0xd7, 0xfe, 0xa0, 0x3e, 0x18, 0xf6, 0x57, 0x6c, 0xa7, 0x30, 0x79, 0x26, 0x9e,
	0xc0, 0xf1, 0x82, 0x6a, 0xf0, 0xce, 0xee, 0x0f, 0x1b, 0x17, 0x9d, 0x81, 0x4c, 0xcb, 0x17, 0xf0,
	0x68, 0x51, 0xdd, 0x6c, 0x88, 0x3d, 0xcc, 0x96, 0x9e, 0x6b, 0xbc, 0x81, 0xe3, 0x80, 0xb0, 0x3b,
	0x1a, 0x7d, 0xa8, 0xb9, 0x64, 0x4c, 0xa2, 0xda, 0x88, 0xca, 0xdf, 0x49, 0x3c, 0x6a, 0x94, 0x2e,
	0xe4, 0x9b, 0xbe, 0xc7, 0x9f, 0x5a, 0x3d, 0xed, 0xdb, 0x2f, 0x47, 0x3e, 0xbb, 0x99, 0x5e, 0xd5,
	0x5c, 0x3a, 0x39, 0x13, 0x56, 0x5f, 0x2b, 0xdf, 0xb3, 0x11, 0x15, 0xff, 0x3e, 0x9c, 0x45, 0xa1,
	0x7b, 0x95, 0x17, 0x2f, 0xb3, 0x9f, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x8d, 0x96, 0x56,
	0xfc, 0x10, 0x00, 0x00,
}
