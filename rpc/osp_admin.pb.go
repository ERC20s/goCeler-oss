// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osp_admin.proto

package rpc

import (
	context "context"
	fmt "fmt"
	entity "github.com/celer-network/goCeler-oss/entity"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next Tag: 3
type RegisterStreamRequest struct {
	PeerRpcAddress       string   `protobuf:"bytes,1,opt,name=peer_rpc_address,json=peerRpcAddress,proto3" json:"peer_rpc_address,omitempty"`
	PeerEthAddress       []byte   `protobuf:"bytes,2,opt,name=peer_eth_address,json=peerEthAddress,proto3" json:"peer_eth_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterStreamRequest) Reset()         { *m = RegisterStreamRequest{} }
func (m *RegisterStreamRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterStreamRequest) ProtoMessage()    {}
func (*RegisterStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{0}
}

func (m *RegisterStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterStreamRequest.Unmarshal(m, b)
}
func (m *RegisterStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterStreamRequest.Marshal(b, m, deterministic)
}
func (m *RegisterStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStreamRequest.Merge(m, src)
}
func (m *RegisterStreamRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterStreamRequest.Size(m)
}
func (m *RegisterStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStreamRequest proto.InternalMessageInfo

func (m *RegisterStreamRequest) GetPeerRpcAddress() string {
	if m != nil {
		return m.PeerRpcAddress
	}
	return ""
}

func (m *RegisterStreamRequest) GetPeerEthAddress() []byte {
	if m != nil {
		return m.PeerEthAddress
	}
	return nil
}

// Next Tag: 5
type SendTokenRequest struct {
	DstAddr              string   `protobuf:"bytes,1,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	AmtWei               string   `protobuf:"bytes,2,opt,name=amt_wei,json=amtWei,proto3" json:"amt_wei,omitempty"`
	TokenAddr            string   `protobuf:"bytes,3,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	Note                 *any.Any `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendTokenRequest) Reset()         { *m = SendTokenRequest{} }
func (m *SendTokenRequest) String() string { return proto.CompactTextString(m) }
func (*SendTokenRequest) ProtoMessage()    {}
func (*SendTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{1}
}

func (m *SendTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTokenRequest.Unmarshal(m, b)
}
func (m *SendTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTokenRequest.Marshal(b, m, deterministic)
}
func (m *SendTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTokenRequest.Merge(m, src)
}
func (m *SendTokenRequest) XXX_Size() int {
	return xxx_messageInfo_SendTokenRequest.Size(m)
}
func (m *SendTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendTokenRequest proto.InternalMessageInfo

func (m *SendTokenRequest) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *SendTokenRequest) GetAmtWei() string {
	if m != nil {
		return m.AmtWei
	}
	return ""
}

func (m *SendTokenRequest) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

func (m *SendTokenRequest) GetNote() *any.Any {
	if m != nil {
		return m.Note
	}
	return nil
}

// Next Tag: 3
type SendTokenResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	PayId                string   `protobuf:"bytes,3,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendTokenResponse) Reset()         { *m = SendTokenResponse{} }
func (m *SendTokenResponse) String() string { return proto.CompactTextString(m) }
func (*SendTokenResponse) ProtoMessage()    {}
func (*SendTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{2}
}

func (m *SendTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTokenResponse.Unmarshal(m, b)
}
func (m *SendTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTokenResponse.Marshal(b, m, deterministic)
}
func (m *SendTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTokenResponse.Merge(m, src)
}
func (m *SendTokenResponse) XXX_Size() int {
	return xxx_messageInfo_SendTokenResponse.Size(m)
}
func (m *SendTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendTokenResponse proto.InternalMessageInfo

func (m *SendTokenResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SendTokenResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SendTokenResponse) GetPayId() string {
	if m != nil {
		return m.PayId
	}
	return ""
}

// Admin request to ask the receiving osp to open a channel with peer.
// Next tag: 6
type OspOpenChannelRequest struct {
	// Peer to open channel with the osp.
	PeerEthAddress []byte `protobuf:"bytes,1,opt,name=peer_eth_address,json=peerEthAddress,proto3" json:"peer_eth_address,omitempty"`
	// ETH or ERC20
	TokenType entity.TokenType `protobuf:"varint,2,opt,name=token_type,json=tokenType,proto3,enum=entity.TokenType" json:"token_type,omitempty"`
	// where the token is defined.
	TokenAddress []byte `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	// Deposit from myself in wei in decimal
	SelfDepositAmtWei string `protobuf:"bytes,4,opt,name=self_deposit_amt_wei,json=selfDepositAmtWei,proto3" json:"self_deposit_amt_wei,omitempty"`
	// Deposit asking to peer in wei in decimal
	PeerDepositAmtWei    string   `protobuf:"bytes,5,opt,name=peer_deposit_amt_wei,json=peerDepositAmtWei,proto3" json:"peer_deposit_amt_wei,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OspOpenChannelRequest) Reset()         { *m = OspOpenChannelRequest{} }
func (m *OspOpenChannelRequest) String() string { return proto.CompactTextString(m) }
func (*OspOpenChannelRequest) ProtoMessage()    {}
func (*OspOpenChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{3}
}

func (m *OspOpenChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OspOpenChannelRequest.Unmarshal(m, b)
}
func (m *OspOpenChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OspOpenChannelRequest.Marshal(b, m, deterministic)
}
func (m *OspOpenChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OspOpenChannelRequest.Merge(m, src)
}
func (m *OspOpenChannelRequest) XXX_Size() int {
	return xxx_messageInfo_OspOpenChannelRequest.Size(m)
}
func (m *OspOpenChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OspOpenChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OspOpenChannelRequest proto.InternalMessageInfo

func (m *OspOpenChannelRequest) GetPeerEthAddress() []byte {
	if m != nil {
		return m.PeerEthAddress
	}
	return nil
}

func (m *OspOpenChannelRequest) GetTokenType() entity.TokenType {
	if m != nil {
		return m.TokenType
	}
	return entity.TokenType_INVALID
}

func (m *OspOpenChannelRequest) GetTokenAddress() []byte {
	if m != nil {
		return m.TokenAddress
	}
	return nil
}

func (m *OspOpenChannelRequest) GetSelfDepositAmtWei() string {
	if m != nil {
		return m.SelfDepositAmtWei
	}
	return ""
}

func (m *OspOpenChannelRequest) GetPeerDepositAmtWei() string {
	if m != nil {
		return m.PeerDepositAmtWei
	}
	return ""
}

// Admin request to build routing table.
// Next tag: 2
type BuildRoutingTableRequest struct {
	TokenAddress         []byte   `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildRoutingTableRequest) Reset()         { *m = BuildRoutingTableRequest{} }
func (m *BuildRoutingTableRequest) String() string { return proto.CompactTextString(m) }
func (*BuildRoutingTableRequest) ProtoMessage()    {}
func (*BuildRoutingTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{4}
}

func (m *BuildRoutingTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRoutingTableRequest.Unmarshal(m, b)
}
func (m *BuildRoutingTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRoutingTableRequest.Marshal(b, m, deterministic)
}
func (m *BuildRoutingTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRoutingTableRequest.Merge(m, src)
}
func (m *BuildRoutingTableRequest) XXX_Size() int {
	return xxx_messageInfo_BuildRoutingTableRequest.Size(m)
}
func (m *BuildRoutingTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRoutingTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRoutingTableRequest proto.InternalMessageInfo

func (m *BuildRoutingTableRequest) GetTokenAddress() []byte {
	if m != nil {
		return m.TokenAddress
	}
	return nil
}

// Admin request to clear expired pays.
// Next tag: 2
type ClearExpiredPaysRequest struct {
	TokenAddress         []byte   `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearExpiredPaysRequest) Reset()         { *m = ClearExpiredPaysRequest{} }
func (m *ClearExpiredPaysRequest) String() string { return proto.CompactTextString(m) }
func (*ClearExpiredPaysRequest) ProtoMessage()    {}
func (*ClearExpiredPaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{5}
}

func (m *ClearExpiredPaysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearExpiredPaysRequest.Unmarshal(m, b)
}
func (m *ClearExpiredPaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearExpiredPaysRequest.Marshal(b, m, deterministic)
}
func (m *ClearExpiredPaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearExpiredPaysRequest.Merge(m, src)
}
func (m *ClearExpiredPaysRequest) XXX_Size() int {
	return xxx_messageInfo_ClearExpiredPaysRequest.Size(m)
}
func (m *ClearExpiredPaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearExpiredPaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearExpiredPaysRequest proto.InternalMessageInfo

func (m *ClearExpiredPaysRequest) GetTokenAddress() []byte {
	if m != nil {
		return m.TokenAddress
	}
	return nil
}

// Admin request to confirm on-chain resolved pays.
// Next tag: 2
type ConfirmOnChainResolvedPaysRequest struct {
	TokenAddress         []byte   `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmOnChainResolvedPaysRequest) Reset()         { *m = ConfirmOnChainResolvedPaysRequest{} }
func (m *ConfirmOnChainResolvedPaysRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmOnChainResolvedPaysRequest) ProtoMessage()    {}
func (*ConfirmOnChainResolvedPaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{6}
}

func (m *ConfirmOnChainResolvedPaysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfirmOnChainResolvedPaysRequest.Unmarshal(m, b)
}
func (m *ConfirmOnChainResolvedPaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfirmOnChainResolvedPaysRequest.Marshal(b, m, deterministic)
}
func (m *ConfirmOnChainResolvedPaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmOnChainResolvedPaysRequest.Merge(m, src)
}
func (m *ConfirmOnChainResolvedPaysRequest) XXX_Size() int {
	return xxx_messageInfo_ConfirmOnChainResolvedPaysRequest.Size(m)
}
func (m *ConfirmOnChainResolvedPaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmOnChainResolvedPaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmOnChainResolvedPaysRequest proto.InternalMessageInfo

func (m *ConfirmOnChainResolvedPaysRequest) GetTokenAddress() []byte {
	if m != nil {
		return m.TokenAddress
	}
	return nil
}

// Admin request to list all active peer osps.
// Next tag: 2
type ActivePeerOspsResponse struct {
	// eth addr of peer osps.
	Osps                 []string `protobuf:"bytes,1,rep,name=osps,proto3" json:"osps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivePeerOspsResponse) Reset()         { *m = ActivePeerOspsResponse{} }
func (m *ActivePeerOspsResponse) String() string { return proto.CompactTextString(m) }
func (*ActivePeerOspsResponse) ProtoMessage()    {}
func (*ActivePeerOspsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a58c2d65cdc11488, []int{7}
}

func (m *ActivePeerOspsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivePeerOspsResponse.Unmarshal(m, b)
}
func (m *ActivePeerOspsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivePeerOspsResponse.Marshal(b, m, deterministic)
}
func (m *ActivePeerOspsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePeerOspsResponse.Merge(m, src)
}
func (m *ActivePeerOspsResponse) XXX_Size() int {
	return xxx_messageInfo_ActivePeerOspsResponse.Size(m)
}
func (m *ActivePeerOspsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePeerOspsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePeerOspsResponse proto.InternalMessageInfo

func (m *ActivePeerOspsResponse) GetOsps() []string {
	if m != nil {
		return m.Osps
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterStreamRequest)(nil), "rpc.RegisterStreamRequest")
	proto.RegisterType((*SendTokenRequest)(nil), "rpc.SendTokenRequest")
	proto.RegisterType((*SendTokenResponse)(nil), "rpc.SendTokenResponse")
	proto.RegisterType((*OspOpenChannelRequest)(nil), "rpc.OspOpenChannelRequest")
	proto.RegisterType((*BuildRoutingTableRequest)(nil), "rpc.BuildRoutingTableRequest")
	proto.RegisterType((*ClearExpiredPaysRequest)(nil), "rpc.ClearExpiredPaysRequest")
	proto.RegisterType((*ConfirmOnChainResolvedPaysRequest)(nil), "rpc.ConfirmOnChainResolvedPaysRequest")
	proto.RegisterType((*ActivePeerOspsResponse)(nil), "rpc.ActivePeerOspsResponse")
}

func init() { proto.RegisterFile("osp_admin.proto", fileDescriptor_a58c2d65cdc11488) }

var fileDescriptor_a58c2d65cdc11488 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xd6, 0x6c, 0x93, 0x2c, 0x31, 0x25, 0x34, 0x56, 0x7e, 0xda, 0x34, 0x65, 0xcb, 0x2c, 0x54,
	0xd9, 0x15, 0xcc, 0xa0, 0xc2, 0xd5, 0x5e, 0x80, 0xb2, 0xa1, 0x02, 0xae, 0xb2, 0x9a, 0xad, 0x54,
	0xc4, 0xcd, 0xc8, 0x99, 0x39, 0x4d, 0xac, 0x4c, 0x6c, 0x63, 0x3b, 0x5b, 0xe6, 0x0a, 0x89, 0x17,
	0xe0, 0x82, 0x7b, 0x5e, 0x81, 0x87, 0xe1, 0x15, 0x78, 0x0a, 0xae, 0x90, 0x3d, 0x9e, 0x90, 0x5f,
	0x21, 0xf6, 0x6e, 0xec, 0x73, 0xce, 0xf7, 0x7d, 0xe7, 0x3b, 0xb6, 0x07, 0xbd, 0xcf, 0x95, 0x88,
	0x49, 0xba, 0xa0, 0x2c, 0x10, 0x92, 0x6b, 0x8e, 0x8f, 0xa4, 0x48, 0x7a, 0xfd, 0x29, 0xe7, 0xd3,
	0x0c, 0x42, 0x22, 0x68, 0x48, 0x18, 0xe3, 0x9a, 0x68, 0xca, 0x99, 0x2a, 0x52, 0x7a, 0x67, 0x2e,
	0x6a, 0x57, 0x93, 0xe5, 0x7d, 0x48, 0x58, 0xee, 0x42, 0xe7, 0xdb, 0x21, 0x58, 0x08, 0x5d, 0x06,
	0x8f, 0x81, 0x69, 0x5a, 0xae, 0xfc, 0x39, 0x6a, 0x47, 0x30, 0xa5, 0x4a, 0x83, 0x7c, 0xad, 0x25,
	0x90, 0x45, 0x04, 0x3f, 0x2e, 0x41, 0x69, 0x3c, 0x40, 0x27, 0x02, 0x40, 0xc6, 0x52, 0x24, 0x31,
	0x49, 0x53, 0x09, 0x4a, 0x9d, 0x7a, 0x97, 0xde, 0xa0, 0x1e, 0x35, 0xcc, 0x7e, 0x24, 0x92, 0x61,
	0xb1, 0xbb, 0xca, 0x04, 0x3d, 0x5b, 0x65, 0x3e, 0xba, 0xf4, 0x06, 0xc7, 0x45, 0xe6, 0x8d, 0x9e,
	0xb9, 0x4c, 0xff, 0x57, 0x0f, 0x9d, 0xbc, 0x06, 0x96, 0xde, 0xf2, 0x39, 0xb0, 0x92, 0xe8, 0x0c,
	0xbd, 0x93, 0x2a, 0x6d, 0x2b, 0x1d, 0xc1, 0xe3, 0x54, 0x69, 0x53, 0x82, 0xbb, 0xe8, 0x31, 0x59,
	0xe8, 0xf8, 0x01, 0xa8, 0x05, 0xac, 0x47, 0x35, 0xb2, 0xd0, 0x77, 0x40, 0xf1, 0x05, 0x42, 0xda,
	0x60, 0x14, 0x55, 0x47, 0x36, 0x56, 0xb7, 0x3b, 0xb6, 0x6e, 0x80, 0x2a, 0x8c, 0x6b, 0x38, 0xad,
	0x5c, 0x7a, 0x83, 0x77, 0xaf, 0x5b, 0x41, 0x61, 0x47, 0x50, 0xda, 0x11, 0x0c, 0x59, 0x1e, 0xd9,
	0x0c, 0xff, 0x7b, 0xd4, 0x5c, 0x13, 0xa4, 0x04, 0x67, 0x0a, 0x70, 0x07, 0xd5, 0x94, 0x26, 0x7a,
	0x59, 0x34, 0x5c, 0x8d, 0xdc, 0x0a, 0xb7, 0x50, 0x15, 0xa4, 0xe4, 0xd2, 0x89, 0x29, 0x16, 0xb8,
	0x8d, 0x6a, 0x82, 0xe4, 0x31, 0x4d, 0x9d, 0x8e, 0xaa, 0x20, 0xf9, 0x77, 0xa9, 0xff, 0xb7, 0x87,
	0xda, 0x63, 0x25, 0xc6, 0x02, 0xd8, 0x68, 0x46, 0x18, 0x83, 0x6c, 0xdb, 0xd9, 0x75, 0xbf, 0xbc,
	0x7d, 0x7e, 0xe1, 0xcf, 0xca, 0x36, 0x75, 0x2e, 0xc0, 0xb2, 0x36, 0xae, 0x9b, 0x81, 0x9b, 0x9f,
	0xd5, 0x7c, 0x9b, 0x0b, 0x70, 0x9d, 0x9b, 0x4f, 0xfc, 0x14, 0xbd, 0xf7, 0xaf, 0x31, 0x06, 0xf8,
	0xc8, 0x02, 0x1f, 0xaf, 0xbc, 0x31, 0xb0, 0x21, 0x6a, 0x29, 0xc8, 0xee, 0xe3, 0x14, 0x04, 0x57,
	0x54, 0xc7, 0xa5, 0xc7, 0x15, 0xab, 0xbf, 0x69, 0x62, 0x5f, 0x17, 0xa1, 0x61, 0x61, 0x77, 0x88,
	0x5a, 0x56, 0xf1, 0x76, 0x41, 0xb5, 0x28, 0x30, 0xb1, 0x8d, 0x02, 0xff, 0x2b, 0x74, 0xfa, 0x72,
	0x49, 0xb3, 0x34, 0xe2, 0x4b, 0x4d, 0xd9, 0xf4, 0x96, 0x4c, 0x32, 0x28, 0xdb, 0xdf, 0x91, 0xe8,
	0xed, 0x4a, 0xf4, 0xbf, 0x44, 0xdd, 0x51, 0x06, 0x44, 0xde, 0xfc, 0x24, 0xa8, 0x84, 0xf4, 0x15,
	0xc9, 0xd5, 0xff, 0xaa, 0xff, 0x16, 0x7d, 0x38, 0xe2, 0xec, 0x9e, 0xca, 0xc5, 0xd8, 0xd8, 0x4f,
	0xcd, 0x70, 0x79, 0xf6, 0xe6, 0x2d, 0x90, 0x3e, 0x41, 0x9d, 0x61, 0xa2, 0xe9, 0x1b, 0x78, 0x05,
	0x20, 0xc7, 0x4a, 0xa8, 0xd5, 0x31, 0xc1, 0xa8, 0xc2, 0x95, 0x30, 0x55, 0x47, 0x83, 0x7a, 0x64,
	0xbf, 0xaf, 0xff, 0xa8, 0xa1, 0xea, 0xd0, 0xdc, 0x63, 0xfc, 0xbb, 0x87, 0xae, 0x0e, 0x4b, 0xb8,
	0xa3, 0x7a, 0x56, 0x02, 0xe2, 0xab, 0x40, 0x8a, 0x24, 0xf8, 0x4f, 0xbd, 0xbd, 0xce, 0xce, 0x41,
	0xbe, 0x31, 0xf7, 0xda, 0xff, 0xe2, 0x97, 0x3f, 0xff, 0xfa, 0xed, 0x51, 0xe0, 0x3f, 0x0b, 0xed,
	0x13, 0x12, 0x9a, 0x79, 0x84, 0x49, 0x01, 0x17, 0x73, 0x96, 0x18, 0xbc, 0x58, 0x3a, 0xc0, 0x58,
	0x90, 0x5c, 0xbd, 0xf0, 0x9e, 0xe3, 0x9f, 0x51, 0x7f, 0xdb, 0xe2, 0x0d, 0x55, 0xfd, 0x42, 0xd5,
	0xfe, 0x29, 0x1c, 0xd4, 0xf2, 0xcc, 0x6a, 0x79, 0xea, 0x7f, 0xb0, 0xa1, 0xc5, 0x80, 0xc4, 0x50,
	0xa0, 0xac, 0x04, 0x50, 0xd4, 0xdc, 0x39, 0x24, 0xf8, 0xc2, 0xb2, 0x1e, 0x3a, 0x3c, 0x07, 0x69,
	0x2f, 0x2c, 0x6d, 0xd7, 0xc7, 0x8e, 0x56, 0xf2, 0xa5, 0x86, 0x70, 0x62, 0x60, 0x1c, 0xd5, 0x37,
	0xa0, 0x37, 0xe7, 0x88, 0x0f, 0x60, 0xf5, 0xce, 0xad, 0x84, 0xfd, 0x43, 0xf7, 0x9f, 0x58, 0xa2,
	0x33, 0xdc, 0x5d, 0xef, 0x8f, 0xd8, 0xdc, 0xd8, 0x9c, 0x00, 0x3c, 0x43, 0x8d, 0xcd, 0x6b, 0x8f,
	0x7b, 0x16, 0x6f, 0xef, 0x5b, 0x70, 0xb0, 0x1f, 0xdf, 0xd2, 0xf4, 0xfd, 0x0d, 0x1a, 0x2e, 0xc0,
	0x0c, 0xd3, 0xd4, 0x9b, 0xa6, 0xee, 0x50, 0x7d, 0xf5, 0x76, 0xe1, 0xb6, 0x25, 0xd9, 0x7e, 0x5c,
	0x7b, 0x9d, 0xed, 0x6d, 0xd7, 0xc6, 0xb9, 0xc5, 0x6f, 0xfb, 0x27, 0x0e, 0x5f, 0x01, 0x4b, 0xed,
	0xb1, 0x37, 0xc0, 0x73, 0xd4, 0xd8, 0xfc, 0x27, 0xb8, 0x16, 0xf6, 0xfe, 0x28, 0x0e, 0xb6, 0xf0,
	0xb1, 0xa5, 0x78, 0xe2, 0xf7, 0xd6, 0x5b, 0x90, 0x0e, 0x42, 0x59, 0x88, 0x17, 0xde, 0xf3, 0x97,
	0x57, 0x3f, 0x7c, 0x34, 0xa5, 0x7a, 0xb6, 0x9c, 0x04, 0x09, 0x5f, 0x84, 0x09, 0x64, 0x20, 0x3f,
	0x65, 0xa0, 0x1f, 0xb8, 0x9c, 0x87, 0x53, 0x3e, 0x32, 0xeb, 0x50, 0x8a, 0x64, 0x52, 0xb3, 0xf0,
	0x9f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x2a, 0xa7, 0x2e, 0x2b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// ConfirmOnChainResolvedPaysWithPeerOsps instructs Osp to confirm on-chain resolved pays between itself and connected osps.
	ConfirmOnChainResolvedPaysWithPeerOsps(ctx context.Context, in *ConfirmOnChainResolvedPaysRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ClearExpiredPaysWithPeerOsps instructs Osp to clear expired pays between itself and connected osps.
	ClearExpiredPaysWithPeerOsps(ctx context.Context, in *ClearExpiredPaysRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// BuildRoutingTable instructs Osp to build routing table.
	BuildRoutingTable(ctx context.Context, in *BuildRoutingTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetActivePeerOsps returns eth addresses of active peer osps. Keep admin informed about who are connecting to the osp.
	GetActivePeerOsps(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActivePeerOspsResponse, error)
	// OspOpenChannel instructs Osp to open a state channel with a peer described in request.
	OspOpenChannel(ctx context.Context, in *OspOpenChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SendToken instruscts the OSP to send token specified in SendTokenRequest.
	SendToken(ctx context.Context, in *SendTokenRequest, opts ...grpc.CallOption) (*SendTokenResponse, error)
	// RegisterStream instructs the OSP to connect with other osp specified in RegisterStreamRequest.
	RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ConfirmOnChainResolvedPaysWithPeerOsps(ctx context.Context, in *ConfirmOnChainResolvedPaysRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.Admin/ConfirmOnChainResolvedPaysWithPeerOsps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearExpiredPaysWithPeerOsps(ctx context.Context, in *ClearExpiredPaysRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.Admin/ClearExpiredPaysWithPeerOsps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BuildRoutingTable(ctx context.Context, in *BuildRoutingTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.Admin/BuildRoutingTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetActivePeerOsps(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActivePeerOspsResponse, error) {
	out := new(ActivePeerOspsResponse)
	err := c.cc.Invoke(ctx, "/rpc.Admin/GetActivePeerOsps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) OspOpenChannel(ctx context.Context, in *OspOpenChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.Admin/OspOpenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendToken(ctx context.Context, in *SendTokenRequest, opts ...grpc.CallOption) (*SendTokenResponse, error) {
	out := new(SendTokenResponse)
	err := c.cc.Invoke(ctx, "/rpc.Admin/SendToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.Admin/RegisterStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// ConfirmOnChainResolvedPaysWithPeerOsps instructs Osp to confirm on-chain resolved pays between itself and connected osps.
	ConfirmOnChainResolvedPaysWithPeerOsps(context.Context, *ConfirmOnChainResolvedPaysRequest) (*empty.Empty, error)
	// ClearExpiredPaysWithPeerOsps instructs Osp to clear expired pays between itself and connected osps.
	ClearExpiredPaysWithPeerOsps(context.Context, *ClearExpiredPaysRequest) (*empty.Empty, error)
	// BuildRoutingTable instructs Osp to build routing table.
	BuildRoutingTable(context.Context, *BuildRoutingTableRequest) (*empty.Empty, error)
	// GetActivePeerOsps returns eth addresses of active peer osps. Keep admin informed about who are connecting to the osp.
	GetActivePeerOsps(context.Context, *empty.Empty) (*ActivePeerOspsResponse, error)
	// OspOpenChannel instructs Osp to open a state channel with a peer described in request.
	OspOpenChannel(context.Context, *OspOpenChannelRequest) (*empty.Empty, error)
	// SendToken instruscts the OSP to send token specified in SendTokenRequest.
	SendToken(context.Context, *SendTokenRequest) (*SendTokenResponse, error)
	// RegisterStream instructs the OSP to connect with other osp specified in RegisterStreamRequest.
	RegisterStream(context.Context, *RegisterStreamRequest) (*empty.Empty, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) ConfirmOnChainResolvedPaysWithPeerOsps(ctx context.Context, req *ConfirmOnChainResolvedPaysRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOnChainResolvedPaysWithPeerOsps not implemented")
}
func (*UnimplementedAdminServer) ClearExpiredPaysWithPeerOsps(ctx context.Context, req *ClearExpiredPaysRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearExpiredPaysWithPeerOsps not implemented")
}
func (*UnimplementedAdminServer) BuildRoutingTable(ctx context.Context, req *BuildRoutingTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRoutingTable not implemented")
}
func (*UnimplementedAdminServer) GetActivePeerOsps(ctx context.Context, req *empty.Empty) (*ActivePeerOspsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePeerOsps not implemented")
}
func (*UnimplementedAdminServer) OspOpenChannel(ctx context.Context, req *OspOpenChannelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OspOpenChannel not implemented")
}
func (*UnimplementedAdminServer) SendToken(ctx context.Context, req *SendTokenRequest) (*SendTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToken not implemented")
}
func (*UnimplementedAdminServer) RegisterStream(ctx context.Context, req *RegisterStreamRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStream not implemented")
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_ConfirmOnChainResolvedPaysWithPeerOsps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOnChainResolvedPaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ConfirmOnChainResolvedPaysWithPeerOsps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/ConfirmOnChainResolvedPaysWithPeerOsps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ConfirmOnChainResolvedPaysWithPeerOsps(ctx, req.(*ConfirmOnChainResolvedPaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearExpiredPaysWithPeerOsps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearExpiredPaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearExpiredPaysWithPeerOsps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/ClearExpiredPaysWithPeerOsps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearExpiredPaysWithPeerOsps(ctx, req.(*ClearExpiredPaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BuildRoutingTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRoutingTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BuildRoutingTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/BuildRoutingTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BuildRoutingTable(ctx, req.(*BuildRoutingTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetActivePeerOsps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetActivePeerOsps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/GetActivePeerOsps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetActivePeerOsps(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_OspOpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OspOpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).OspOpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/OspOpenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).OspOpenChannel(ctx, req.(*OspOpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/SendToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendToken(ctx, req.(*SendTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RegisterStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RegisterStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Admin/RegisterStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RegisterStream(ctx, req.(*RegisterStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmOnChainResolvedPaysWithPeerOsps",
			Handler:    _Admin_ConfirmOnChainResolvedPaysWithPeerOsps_Handler,
		},
		{
			MethodName: "ClearExpiredPaysWithPeerOsps",
			Handler:    _Admin_ClearExpiredPaysWithPeerOsps_Handler,
		},
		{
			MethodName: "BuildRoutingTable",
			Handler:    _Admin_BuildRoutingTable_Handler,
		},
		{
			MethodName: "GetActivePeerOsps",
			Handler:    _Admin_GetActivePeerOsps_Handler,
		},
		{
			MethodName: "OspOpenChannel",
			Handler:    _Admin_OspOpenChannel_Handler,
		},
		{
			MethodName: "SendToken",
			Handler:    _Admin_SendToken_Handler,
		},
		{
			MethodName: "RegisterStream",
			Handler:    _Admin_RegisterStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osp_admin.proto",
}
